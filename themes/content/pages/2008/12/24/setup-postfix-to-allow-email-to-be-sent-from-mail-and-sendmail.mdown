date: 24 Dec 2008 20:01pm
categories: linux
read more: More&#8230;
summary: This article outlines how to configure Ubuntu Linux to allow the command-line applications, Mail and Sendmail, and likewise programming languages, to send email through your ISP&#8217;s mail server (eg, Gmail).

# Setup Postfix to Allow Email to be Sent from Mail and Sendmail

Having done it before, I know that setting up a full-on local SMTP server at home is a fairly involved operation.  Furthermore, many consumer ISP&#8217;s block home SMTP servers to deter spammers from setting up bulk-email operations over their connections.  Rather than go through all that, we&#8217;re going to  configure a scaled-back install of Postfix to send all email to your ISP&#8217;s SMTP server, in essence, making your server appear to your ISP as &#8220;just another&#8221; client email application \[Mac Mail, Outlook, Thunderbird, etc.\]  Because server-side languages (Ruby, Python, PHP) and Web frameworks almost always leverage Sendmail or Mail, email sent programmatically via these languages will also route through your ISP's servers.

Tested on Kubuntu 8.04.  YMMV.

## Install Postfix and Mail Utilities

    :::bash
    apt-get install postfix

Answer &#8220;Yes&#8221; to any prompts.  When it&#8217;s complete, you will see an installation screen ask about what type of Postfix Configuration you would like.  Select &#8220;**Satellite System**&#8221;.  This means that we don&#8217;t plan on using the system for full SMTP services.  We will be relaying mail to an external SMTP server.  Leave the defaults for the remaining questions. We are going to change some of those via the config file anyway.

    :::bash
    apt-get install mailutils

## Configure Postfix

Edit `/etc/postfix/main.cf`.

    :::bash
    nano /etc/postfix/main.cf

Delete the existing &#8220;relayhost&#8221; line.

Append this to the end:

    :::bash
    relayhost = smtp.yourisp.com
    # You may use smtp.yourisp.com:port, eg, smtp.yourisp.com:587.
    smtp_sasl_auth_enable = yes
    smtp_use_tls = yes
    smtp_enforce_tls = yes
    smtp_sasl_security_options =
    smtp_sasl_tls_security_options =
    smtp_sasl_tls_verified_security_options =
    smtp_tls_loglevel = 2
    # Mail log is in /var/log/mail.log.
    smtp_sasl_password_maps = hash:/etc/postfix/smtp_sasl_passwords
    smtp_tls_per_site = hash:/etc/postfix/smtp_tls_sites
    tls_random_source = dev:/dev/urandom

Create `/etc/postfix/smtp_sasl_passwords`.

    :::bash
    nano /etc/postfix/smtp_sasl_passwords

Add the following to it, adjusting it to be the correct configs for a valid email account at your ISP:

    :::bash
    smtp.yourisp.com username:password

Create `/etc/postfix/smtp_tls_sites`:

    :::bash
    nano /etc/postfix/smtp_tls_sites

Add the following contents:

    :::bash
    smtp.yourisp.com MUST_NOPEERMATCH

Run these commands:

    :::bash
    cd /etc/postfix
    chmod go-rx smtp_sasl_passwords
    postmap smtp_sasl_passwords
    postmap smtp_tls_sites

## Test

Send a test email using Mail:

    :::bash
    echo "Hello from Mail." | mail -s "Mail Test" you@domain.com

The above test may not work if your provider requires a valid source e-mail address.  If that&#8217;s the case, try:

    :::bash
    printf "Subject: Sendmail Test" | sendmail -f you@domain.com you@domain.com

This second test specifies the &#8220;From&#8221; address as you, but can be changed to anything you want as long as it exists as a valid email address with your provider.  If you are a paying Internet customer, it does.

If the emails don&#8217;t arrive, check the logs:

    :::bash
    tail /var/log/mail.log

If you want to see the logs in real time while you send mail, pop open a second Terminal tab/window, and:

    :::bash
    tail -f /var/log/mail.log

## Notes

* The `*_security_options` settings allow postfix to use plain text passwords during authentication (albeit over TLS).
* The `MUST_NOPEERMATCH` in the `smtp_tls_sites` file ignores certificate mismatches when negotiating TLS. This, generally, is not a good idea, but I didn&#8217;t have time to play with it yet and configure the CA. Other options are NONE, MAY, and MUST, but some will require configuration of the CA so that a trust can be established with the server. This, I believe, is configured with `smtp_tls_CAfile`
* The `chmod go-rx smtp_sasl_passwords` removes the group and other/world read/execute permissions on the password files. Only the root user should be able to read it.
